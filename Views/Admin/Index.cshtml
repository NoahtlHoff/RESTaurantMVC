@{
    ViewData["Title"] = "Adminpanel";
}

<h1 class="mb-4">Adminpanel</h1>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">Bokningar</h5>
            <div>
                <button class="btn btn-sm btn-outline-secondary" onclick="prevWeek()">‚Üê F√∂rra veckan</button>
                <button class="btn btn-sm btn-primary" onclick="thisWeek()">Denna vecka</button>
                <button class="btn btn-sm btn-outline-secondary" onclick="nextWeek()">N√§sta vecka ‚Üí</button>
            </div>
        </div>

        <form id="form" onsubmit="save(event)" class="p-3 bg-light rounded mb-4">
            <input type="hidden" id="id">
            <div class="row g-2 mb-2">
                <div class="col-md-4">
                    <input type="text" class="form-control" id="name" placeholder="Namn" required>
                </div>
                <div class="col-md-3">
                    <input type="tel" class="form-control" id="phone" placeholder="Telefonnummer">
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control" id="table" placeholder="Bord">
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success w-100">Spara</button>
                </div>
            </div>
            <div class="row g-2">
                <div class="col-md-3">
                    <input type="date" class="form-control" id="date" required>
                </div>
                <div class="col-md-2">
                    <input type="time" class="form-control" id="time" required>
                </div>
                <div class="col-md-2">
                    <input type="number" class="form-control" id="size" placeholder="Antal" min="1" value="2" required>
                </div>
            </div>
        </form>

        <div id="error-message" class="alert alert-danger d-none"></div>

        <!-- Date selector and bookings grouped by date -->
        <div id="bookings-container">
            <div class="text-center py-4">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Laddar...</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row g-3">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5>Meny</h5>
                <a class="btn btn-primary btn-sm me-2" asp-action="Menu">Visa</a>
                <a class="btn btn-success btn-sm" asp-action="CreateMenuItem">L√§gg till</a>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5>Bord</h5>
                <a class="btn btn-primary btn-sm me-2" asp-action="Tables">Visa</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let bookings = [];
        let currentWeekStart = new Date();

        document.addEventListener('DOMContentLoaded', () => {
            setDefaults();
            thisWeek();
        });

        function setDefaults() {
            const today = new Date().toISOString().slice(0, 10);
            document.getElementById('date').value = today;

            const now = new Date();
            let hour = now.getHours();
            if (hour < 17) hour = 17;
            if (hour > 21) hour = 17;
            document.getElementById('time').value = `${hour.toString().padStart(2, '0')}:00`;

            document.getElementById('size').value = 2;
        }

        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.textContent = message;
            errorDiv.classList.remove('d-none');
            setTimeout(() => errorDiv.classList.add('d-none'), 5000);
        }

        function getMonday(d) {
            const date = new Date(d);
            const day = date.getDay();
            const diff = date.getDate() - day + (day === 0 ? -6 : 1);
            return new Date(date.setDate(diff));
        }

        function thisWeek() {
            currentWeekStart = getMonday(new Date());
            load();
        }

        function prevWeek() {
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            load();
        }

        function nextWeek() {
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            load();
        }

        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const days = ['S√∂n', 'M√•n', 'Tis', 'Ons', 'Tor', 'Fre', 'L√∂r'];
            const months = ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'];
            return `${days[date.getDay()]} ${date.getDate()} ${months[date.getMonth()]}`;
        }

        async function load() {
            const container = document.getElementById('bookings-container');

            try {
                const res = await fetch('/admin/api/bookings');

                if (!res.ok) {
                    let errorMsg = `Fel vid h√§mtning (${res.status})`;
                    try {
                        const errorData = await res.json();
                        errorMsg = errorData.error || errorMsg;
                    } catch (e) {
                        const text = await res.text();
                        console.error('Server error:', text);
                    }
                    throw new Error(errorMsg);
                }

                bookings = await res.json();

                // Filter bookings for the current week
                const weekEnd = new Date(currentWeekStart);
                weekEnd.setDate(weekEnd.getDate() + 7);

                const weekBookings = bookings.filter(b => {
                    const bookingDate = new Date(b.date);
                    return bookingDate >= currentWeekStart && bookingDate < weekEnd;
                });

                // Group bookings by date
                const groupedByDate = {};
                weekBookings.forEach(b => {
                    if (!groupedByDate[b.date]) {
                        groupedByDate[b.date] = [];
                    }
                    groupedByDate[b.date].push(b);
                });

                // Sort each day's bookings by time
                Object.keys(groupedByDate).forEach(date => {
                    groupedByDate[date].sort((a, b) => {
                        const timeA = a.time || '00:00';
                        const timeB = b.time || '00:00';
                        return timeA.localeCompare(timeB);
                    });
                });

                // Generate days for the week
                const days = [];
                for (let i = 0; i < 7; i++) {
                    const date = new Date(currentWeekStart);
                    date.setDate(date.getDate() + i);
                    days.push(date.toISOString().split('T')[0]);
                }

                if (days.length === 0 || weekBookings.length === 0) {
                    container.innerHTML = `
                        <div class="alert alert-info">
                            Inga bokningar f√∂r veckan ${formatDate(currentWeekStart.toISOString())} - ${formatDate(weekEnd.toISOString())}
                        </div>
                    `;
                    return;
                }

                // Create the HTML
                let html = '<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-3">';

                days.forEach(date => {
                    const dayBookings = groupedByDate[date] || [];
                    const isToday = date === new Date().toISOString().split('T')[0];

                    html += `
                        <div class="col">
                            <div class="card h-100 ${isToday ? 'border-primary' : ''}">
                                <div class="card-header ${isToday ? 'bg-primary text-white' : 'bg-light'}">
                                    <strong>${formatDate(date)}</strong>
                                    ${isToday ? '<span class="badge bg-white text-primary ms-2">Idag</span>' : ''}
                                    <br>
                                    <small>${dayBookings.length} bokning${dayBookings.length !== 1 ? 'ar' : ''}</small>
                                </div>
                                <div class="card-body p-2">
                    `;

                    if (dayBookings.length === 0) {
                        html += '<p class="text-muted text-center my-3 small">Inga bokningar</p>';
                    } else {
                        dayBookings.forEach(b => {
                            html += `
                                <div class="border rounded p-2 mb-2 bg-light">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <strong>${b.time?.slice(0,5) || '-'}</strong>
                                            <span class="badge bg-secondary ms-1">${b.partySize || '-'}p</span>
                                        </div>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary btn-sm" onclick="edit(${b.id})" title="√Ñndra">
                                                ‚úèÔ∏è
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm" onclick="del(${b.id})" title="Ta bort">
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    </div>
                                    <div class="small mt-1">
                                        <div><strong>${b.guestName || 'Ingen namn'}</strong></div>
                                        ${b.phone ? `<div class="text-muted">üìû ${b.phone}</div>` : ''}
                                        ${b.tableName ? `<div class="text-muted">ü™ë Bord ${b.tableName}</div>` : ''}
                                    </div>
                                </div>
                            `;
                        });
                    }

                    html += `
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += '</div>';
                container.innerHTML = html;

            } catch (error) {
                console.error('Error loading bookings:', error);
                showError('Kunde inte ladda bokningar: ' + error.message);
                container.innerHTML = `
                    <div class="alert alert-danger">
                        Kunde inte ladda bokningar. Kontrollera att API:et k√∂rs.
                    </div>
                `;
            }
        }

        function edit(id) {
            const b = bookings.find(x => x.id === id);
            if (!b) return;

            document.getElementById('id').value = b.id;
            document.getElementById('name').value = b.guestName || '';
            document.getElementById('date').value = b.date?.slice(0,10) || '';
            document.getElementById('time').value = b.time?.slice(0,5) || '';
            document.getElementById('size').value = b.partySize || 2;
            document.getElementById('phone').value = b.phone || '';
            document.getElementById('table').value = b.tableName || '';

            // Scroll to form
            document.getElementById('form').scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        async function del(id) {
            if (!confirm('Ta bort denna bokning?')) return;

            try {
                const res = await fetch(`/admin/api/bookings/${id}`, { method: 'DELETE' });

                if (!res.ok) {
                    const errorData = await res.json().catch(() => ({}));
                    throw new Error(errorData.error || 'Kunde inte ta bort bokning');
                }

                await load();
            } catch (error) {
                console.error('Error deleting booking:', error);
                showError('Kunde inte ta bort bokning: ' + error.message);
            }
        }

        async function save(e) {
            e.preventDefault();
            const id = document.getElementById('id').value;

            const bookingData = {
                guestName: document.getElementById('name').value,
                date: document.getElementById('date').value,
                time: document.getElementById('time').value,
                partySize: parseInt(document.getElementById('size').value),
                tableName: document.getElementById('table').value,
                phone: document.getElementById('phone').value
            };

            try {
                const res = await fetch(
                    id ? `/admin/api/bookings/${id}` : '/admin/api/bookings',
                    {
                        method: id ? 'PUT' : 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(bookingData)
                    }
                );

                if (!res.ok) {
                    const errorData = await res.json().catch(() => ({}));
                    throw new Error(errorData.error || 'Kunde inte spara bokning');
                }

                document.getElementById('form').reset();
                document.getElementById('id').value = '';
                setDefaults();
                await load();
            } catch (error) {
                console.error('Error saving booking:', error);
                showError('Kunde inte spara bokning: ' + error.message);
            }
        }
    </script>
}